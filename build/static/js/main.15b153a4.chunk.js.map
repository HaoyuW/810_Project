{"version":3,"sources":["logo.svg","config.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","LIBRARY_ABI","constant","inputs","name","outputs","type","payable","stateMutability","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSubmit","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","event","accounts","wrap","_context","prev","next","preventDefault","state","web3","eth","getAccounts","sent","setState","message","lottery","methods","enter","send","from","value","utils","toWei","stop","_x","apply","arguments","onClick","_callee2","_context2","pickWinner","manager","players","balance","loadData","Web3","providers","HttpProvider","Contract","getBalance","console","log","getPlayerCnt","pcnt","i","_this2","react_default","createElement","length","fromWei","onChange","target","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.15b153a4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export const LIBRARY_ADDRESS = '0x4B7CD5564a31a5029314d2a985FAC8d573496543'\n\nexport const LIBRARY_ABI = [\n    {\n      \"constant\": true,\n      \"inputs\": [],\n      \"name\": \"manager\",\n      \"outputs\": [\n        {\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"payable\": false,\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"constant\": true,\n      \"inputs\": [],\n      \"name\": \"winner\",\n      \"outputs\": [\n        {\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"payable\": false,\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"constant\": true,\n      \"inputs\": [\n        {\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"players\",\n      \"outputs\": [\n        {\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"payable\": false,\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"payable\": false,\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"constructor\"\n    },\n    {\n      \"constant\": false,\n      \"inputs\": [],\n      \"name\": \"enter\",\n      \"outputs\": [],\n      \"payable\": true,\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"constant\": false,\n      \"inputs\": [],\n      \"name\": \"pickWinner\",\n      \"outputs\": [],\n      \"payable\": false,\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"constant\": true,\n      \"inputs\": [],\n      \"name\": \"getPlayerCnt\",\n      \"outputs\": [\n        {\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"payable\": false,\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    }\n  ];\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Web3 from 'web3';\nimport { LIBRARY_ADDRESS, LIBRARY_ABI } from './config'\n\nclass App extends Component {\n  \n  constructor(props){\n    super(props);\n    this.state = {\n      manager: '',\n      players: [],\n      balance: '',\n      value: '',\n      message: ''\n    };\n    this.loadData();\n  }\n\n  async loadData() {\n    const web3 = new Web3(new Web3.providers.HttpProvider('http://localhost:7545'));\n    var lottery = new web3.eth.Contract(LIBRARY_ABI, LIBRARY_ADDRESS);\n    const balance = await web3.eth.getBalance(LIBRARY_ADDRESS);\n    console.log(balance); \n    const manager = await lottery.methods.manager().call();\n    var pcnt = await lottery.methods.getPlayerCnt().call();\n    var players = [];\n    var i;\n    for (i = 0; i < pcnt; i++) {\n      players[i] = await lottery.methods.players(i).call();\n    }  \n    if (pcnt === 0){\n      console.log(\"no players now\");\n      players = [];\n    }\n    this.setState({ manager, players, balance });\n    this.setState({web3});\n    this.setState({lottery});\n  }\n\n  onSubmit = async (event) => {\n    event.preventDefault();\n\n    const accounts = await this.state.web3.eth.getAccounts();\n\n    this.setState({ message: 'Waiting on transaction success...' })\n\n    await this.state.lottery.methods.enter().send({\n      from: accounts[1],\n      value: this.state.web3.utils.toWei(this.state.value, 'ether')\n    });\n\n    this.setState({ message: 'You have been entered!' })\n  };\n\n  onClick = async () => {\n    const accounts = await this.state.web3.eth.getAccounts();\n\n    this.setState({ message: 'Waiting on transaction success...' })\n\n    await this.state.lottery.methods.pickWinner().send({\n      from: accounts[0]\n    });\n\n    this.setState({ message: 'A winner has been picked!' })\n\n  };\n\n  render() {\n    return (\n      <div>\n        <h2>Lottery Contract</h2>\n        <p>\n          This contract is managed by {this.state.manager}. <br /> <br />\n          There are currently {this.state.players.length} people entered, <br />\n          competing to win {Web3.utils.fromWei(this.state.balance, 'ether')} ether!\n        </p>\n\n        <hr />\n\n        <form onSubmit={this.onSubmit}>\n          <h4>Want to try your luck?</h4>\n          <div>\n            <label>Amount of ether to enter</label>\n            <input\n              value={this.state.value}\n              onChange={event => this.setState({ value: event.target.value })}\n            />\n          </div>\n          <button>Enter</button>\n        </form>\n\n        <hr />\n\n        <h4>Ready to pick a winner?</h4>\n        <button onClick={this.onClick}>Pick a winner!</button>\n\n        <hr />\n\n        <h1>{this.state.message}</h1>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}